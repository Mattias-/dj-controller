#!/bin/bash
set -eo pipefail
#set -x

if [ "$1" == "-v" ]; then
    set -x
fi
set -u

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"

n_kubectl() {
    kubectl --namespace="$NAMESPACE" "$@"
}

auth_header() {
    set +u
    token=$ACCESS_TOKEN
    if [ "$token" == "" ]; then
        token=$(cat /etc/spotify-oauth/accesstoken)
    fi
    set -u
    echo "Authorization: Bearer $token"
}

sp_curl() {
    curl -s -H "$(auth_header)" "$@"
}

normalize_str() {
    #S=${1// /-}                                  # remove spaces from $1
    #S=${S//:/-}                                  # replace : with -
    S=$1
    S=$(echo "$S" | tr "[:upper:]" "[:lower:]")  # lowercase
    S=$(echo "$S" | tr -cd '[:lower:][:digit:]') # remove non ascii characters
    S=$(echo "$S" | cut -c-253)                  # trim to max 253 characters
    echo "$S"
}

ms_to_min_sec() {
    ms=$1
    ((full_minutes = ms / 60000))
    # Remaining after full minutes is removed
    ((remaining_ms = ms % 60000))
    ((full_secs = remaining_ms / 1000))
    # Remaining after full minutes and full seconds is removed
    ((remaining_ms2 = remaining_ms % 1000))

    # TODO: Figure out how the spotify apps do rounding.
    if (("$remaining_ms2" > 500)); then
        extra_sec=1
    else
        extra_sec=0
    fi
    ((seconds = full_secs + extra_sec))
    echo "$full_minutes:$(printf "%02d" "$seconds")"
}

get_track() {
    track="${1/spotify:track:/}"
    sp_curl "https://api.spotify.com/v1/tracks/$track"
}

now_playing() {
    sp_curl "https://api.spotify.com/v1/me/player"
}

print_n_x() {
    pad="$(printf '%*s' "$1")"
    echo -n "${pad// /$2}"
}

progress_bar() {
    width=$1
    ratio=$2
    print_n_x "$(jq -n "$ratio * $width | floor")" .
    echo -n '|'
    print_n_x "$(jq -n "(1 - $ratio) * $width | ceil")" .
}

manage() {
    track=$1

    TRACK_NAME="$(jq -r '.metadata.name' <<<"$track")"
    echo 1>&2 "Create pod for new track: $TRACK_NAME"

    TRACK_UID="$(jq -r '.metadata.uid' <<<"$track")"

    TRACK_URI="$(jq -r '.spec.uri' <<<"$track")"
    normalized_track_uri="$(normalize_str "${TRACK_URI/spotify:track:/}")"

    POD_NAME="${TRACK_NAME}-${normalized_track_uri}"

    POD_NAME=$POD_NAME \
        TRACK_UID=$TRACK_UID \
        TRACK_NAME=$TRACK_NAME \
        TRACK_URI=$TRACK_URI \
        envsubst <"$DIR/template/pod.tmpl.yaml" |
        n_kubectl apply -f -
}

update_track_info() {
    track=$1
    track_name="$(jq -r '.metadata.name' <<<"$track")"
    echo 1>&2 "Update track info: $track_name"

    track_uri="$(jq -r '.spec.uri' <<<"$track")"
    sp_track=$(get_track "$track_uri")

    t_name=$(jq -r '.name' <<<"$sp_track")
    album=$(jq -r '.album.name' <<<"$sp_track")

    # Get duration as minutes:seconds
    duration_ms=$(jq -r '.duration_ms' <<<"$sp_track")
    # TODO check for null from jq
    duration=$(ms_to_min_sec "$duration_ms")

    artist_name=$(jq -r '.artists[0].name' <<<"$sp_track")
    patch="$(
        cat <<EOF
{ "status": {
        "track": {
            "album": "$album",
            "artist": "$artist_name",
            "duration": "$duration",
            "duration_ms": "$duration_ms",
            "name": "$t_name"
        }
    }
}
EOF
    )"
    n_kubectl patch track "$track_name" --type merge --patch "$patch"
}

update_track_progress() {
    track=$1
    pod=$2

    track_name="$(jq -r '.metadata.name' <<<"$track")"
    #echo 1>&2 "Update track progress: $track_name"

    duration_ms="$(jq -r '.status.track.duration_ms' <<<"$track")"
    progress_ms="0"

    pod_phase=$(jq -r '.status.phase' <<<"$pod")
    if [[ "$pod_phase" == "Succeeded" ]]; then
        phase="Done"
        progress_ms="$duration_ms"
    elif [[ "$pod_phase" == "Pending" ]]; then
        phase="Queued"
    elif [[ "$pod_phase" == "Failed" ]]; then
        phase="Failed"
        # TODO: Handle failure, recreate pod or something.
    elif [[ "$pod_phase" == "Running" ]]; then
        phase="Playing"
        np=$(now_playing)

        # TODO Verify is playing and uri
        #is_playing=$(jq -r '.is_playing' <<<"$np")
        #playing_uri=$(jq -r '.item.uri' <<<"$np")

        duration_ms=$(jq -r '.item.duration_ms' <<<"$np")
        progress_ms=$(jq -r '.progress_ms' <<<"$np")

    else
        phase="Unknown - $pod_phase"
    fi
    if [[ "$duration_ms" == "null" ]]; then
        duration_ms=0
    fi
    if [[ "$progress_ms" == "null" ]]; then
        progress_ms=0
    fi
    duration_string=$(ms_to_min_sec "$duration_ms")
    progress_string=$(ms_to_min_sec "$progress_ms")
    ratio=$(jq -n "$progress_ms/$duration_ms")
    if [ "$ratio" == "null" ]; then
        ratio="0"
    fi
    pb=$(progress_bar 20 "$ratio")

    patch="$(
        cat <<EOF
{ "status": {
        "phase": "$phase",
        "progress": {
            "bar": "$pb",
            "string": "$progress_string",
            "ratio": "$ratio",
            "ratioString": "$progress_string / $duration_string"
        }
    }
}
EOF
    )"
    #echo 1>&2 "$patch"
    #echo 1>&2 "$(jq -r '{"status": {"phase":.status.phase, "progress":.status.progress}}' <<<"$track")"
    diff="$(jq -r "$patch == {\"status\": {\"phase\":.status.phase, \"progress\":.status.progress}}" <<<"$track")"
    if [[ "$diff" != "true" ]]; then
        n_kubectl patch track "$track_name" --type merge --patch "$patch"
    fi
}

get_pod() {
    track_name=$1
    jq -r ".items[] | select(.metadata.ownerReferences[].name == \"$track_name\")" </tmp/pods
}

control_one() {
    track="$1"
    phase="$(jq -r '.status.phase' <<<"$track")"
    if [[ "$phase" == "Done" ]]; then
        # Don't do anything with tracks that are Done
        return
    fi

    track_name="$(jq -r '.metadata.name' <<<"$track")"
    pod=$(get_pod "$track_name")
    pod_name=$(jq -r '.metadata.name' <<<"$pod")

    if [[ "$pod_name" == "" ]]; then
        # A new track. Let the controller manage it.
        manage "$track"
        update_track_info "$track"
    else
        # phase is Playing or Queued
        update_track_progress "$track" "$pod"
    fi
}

control() {
    n_kubectl get pods -l dj-kubelet/spotify-track -ojson >/tmp/pods
    n_kubectl get tracks -ojson >/tmp/tracks

    # Control running
    #running_track_name=$(jq -r '.items[] | select(.status.phase == "Running") | .metadata.ownerReferences[0].name' </tmp/pods)
    #control_one "$running_track_name"

}

control_queued() {
    # Control Queued
    time {
        jq --compact-output -r '.items[] | select(.status.phase == "Queued")' </tmp/tracks |
            while read -r track; do
                control_one "$track"
            done
    }
    echo "Controlled queued"

}

control_not_queued() {
    n_kubectl get pods -l dj-kubelet/spotify-track -ojson >/tmp/pods
    n_kubectl get tracks -ojson >/tmp/tracks
    # Control Not Queued
    time {
        jq --compact-output -r '.items[] | select(.status.phase != "Queued")' </tmp/tracks |
            while read -r track; do
                control_one "$track"
            done
    }
    echo "Controlled not queued"
}

control_playing() {
    # Control playing
    time {
        running_track_name=$(jq -r '.items[] | select(.status.phase == "Running") | .metadata.ownerReferences[0].name' </tmp/pods)
        if [[ "$running_track_name" != "" ]]; then
            control_one "$running_track_name"
        fi
    }
    echo "Controlled playing"
}

forever() {
    sleep_time=$1
    cmd=$2
    while true; do
        sleep "$sleep_time"
        $cmd
    done
}

main() {
    n_kubectl get pods -l dj-kubelet/spotify-track -ojson >/tmp/pods
    n_kubectl get tracks -ojson >/tmp/tracks

    forever 2 control_not_queued &
    forever 2 control_playing &
    forever 10 control_queued &
    wait
}
main
